アライメント　PCが効率よくデータを処理するためのパッキング　
パッキング　　データを1バイトごとではなく４バイトごとに処理する

struct A{
 int a;		→  4byte
 char b;	→　1byte
 shart c;	→　2byte
 float d;	→  4byte
 double e;	→  8byte
};

合計で19byteだがパッキングのせいでトータルが24byteになる（4byteになるようにパディングされる）
対処法
構造体の前に#pragma pack(1)と記述することでパディングが無効になる
だが、PC的には効率の悪い処理の仕方なので一回だけならまだいいが処理の後に#pragma pack()と記述しパディングを戻すことを忘れてはいけない

-----------------------------------------------------------------------

const int size_A = 19			→　exeの実行時に値が入る
const expr int size_A = 19;		→　コンパイル時に値が入る　→#define と似たような使い方ができる


c++ を極めたいなら(suzuki ryou slideshare)で検索して勉強

------------------------------------------------------------------------

企業やコンテストに出す作品は必ずreleaseモードで出力したものを提出すること
理由
・ランタイム再頒布パッケージがデバックモードに対応していないから
VisualStudioをDLする際に入っているDLLなどが他のプレイ用PCに入っていなかったりする			DLL →　Dynamic Linked Library　動的にリンクするライブラリ
・見せたくないもの（デバックの線など）が見えてしまう
・最適化がかかってないからDebugモードは遅い
・「あーこいつ区別ついてねーな、不採用」になる

------------------------------------------------------------------------

企業に提出するときの注意
・自分のプログラムが相手の環境で動かない可能性が十分ある
　→可能な限り様々なPCでテストすること
　→ムービー(Bandicam等のソフトで)をとって添付すること
　　※ムービーについての注意点
　　　コーデックに注意しよう（特殊なコーデックはやっぱり見れない）

・ソースコードを添付する際の注意点
　→見たいソースコードがどこにあるのか分からないじょうきょうが多い
　　可能な限りcppとかhをフォルダ分けしよう
　　ソースコードの階層構造はわかりやすく
・ReadMe的なやつを必ずつけるようにしましょう
　→他人が見るということを意識しましょう

-------------------------------------------------------------------------

◇チーム制作
「制作予定物の概要」の書き方
・まず、どんなゲームかわかるように書きましょう
　→既存のジャンルが当てはまるならまずジャンルを書いてもいい
　→似てるゲームがあるなら、そのゲームのタイトルを説明に加えてもいい
　　そのゲームを知らない人にもわかるような説明を書いてください
　→制作するゲームの中で制作者が一番見てほしいポイントを明確にする

-------------------------------------------------------------------------

★STLコンテナの選択
・vectorとlistの違い
　→vectorの中身は単なる動的配列であるため動的配列として使用するならvector一択である

　→listの中身は文字通りリスト構造であるため「挿入」「削除」が頻繁に発生するならlistを検討したほうがいい

　→挿入がpush_backだけならvectorでいい。insertが頻発するならlistの方がいいかもしれない

　→最終的なサイズが予想できる状態ならpreserveしておけばメモリの再確保コストは最初だけなのでたいていの場合はpreserveかresizeしておく

　→vectorとlistの最大の違いはvectorはメモリ上で「連続している」こと
　　メモリが連続しているということはコピーコストが非常に安いしGPUにメモリをまとめて送る際にもvector一択である
　　また、その性質上ファイルからの読み込みもvectorならそのまま使える
　　あと「メモリブロック確保」をしたいときにはcharかBYTEのvector配列をサイズ分確保すればmallocと同じ意味になるし解放は自動だし使わない理由はない
　※たいていの場合はvectorでいい。迷ったらとにかくvector

--------------------------------------------------------------------------

技術のに対するアンテナを広げる
重要キーワード
西川善治（ゲーム技術ジャーナリスト）
三宅洋一郎（ゲームAI…最近AI全般）
後藤弘茂（GPUやCPUのハードウェア周り）
五反田義治（天才）
SlideShareのCAPCOMとか…
Cedil（CEDEC等の資料があがっている）
Unity（楓Software、凹みTips）
UE4(alwei,Epic公式サイト)
高橋啓次郎

---------------------------------------------------------------------------

ゲーム業界に行きたいならば「ここはこうしたほうがいいよ」な事
　※ポインタではなく参照を使おう（もちろん不適切な部分では使わない）
　　→理由：ポインタはアドレス変更ができ、メモリごとに破壊できるため忌避される
　　　　　　あと、->がめんどくさい。参照なら.でいい
　　→ただし参照が不適切な場合もある
　　　　・「対象（参照先）」が初期化以降に変更される場合
　　　　・nullptrの可能性（オブジェクトが存在しない）がある場合

　※配列、動的配列ではなくarrayやvectorを使おう
　　→理由：C言語の配列は「サイズがわからない」
　　　　　　動的配列においてはfreeやdelete忘れの危険性がある
　　→不適切なばあいはございません
　　　　・ただし、使い方はきちんと把握しておこう

